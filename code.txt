Import the data
x = input';
y = target';
Visualization of data
histogram (y,10)
min_y = min(y)
max_y = max(y)
ZSCORE NORMALIZATION
%Input normalization
mx = mean(x); %mean of x
sx = std(x); %standard deviation of x
x2 = (x-mx)./sx; %normalized value of x
xdenorm = x2.*sx + mx; % x-denormalize formula
%Target Normalization
my = mean(y); %mean of y
sy = std(y); %standard deviation of y
y2 = (y-my)./sy; %normalized value of y
ydenorm = y2.*sy + my; % y-denormalize formula
Visualization of normalized data
histogram (y2,10)
min_y2 = min (y2)
max_y2 = max(y2)
Optimize the number of neurons in the hidden layer Network
for i = 1:60
    % defining the architecture of the ANN
    hiddenLayerSize = i;
    net = fitnet(hiddenLayerSize);
    net.divideParam.trainRatio = 80/100;
    net.divideParam.valRatio = 20/100;
    net.divideParam.testRatio = 0/100;
    
    % training the ANN
    [net,tr] = train(net, xt, yt);
    
    %determine the error of the ANN
    yTrain = net(xt(:,tr.trainInd))
    yTrainTrue = yt(tr.trainInd);
    yVal = net(xt(:,tr.valInd));
    yValTrue = yt(tr.valInd);
    err_Train(i) = immse( yTrain , yTrainTrue); %MSE of training set
    mape_Train(i) = mae( yTrain , yTrainTrue); %MAPE of training set
    err_Val(i) = immse( yVal , yValTrue); %MSE of validation set
    mape_Val(i) = mae( yVal , yValTrue); %MAPE of validation set
end
Selecting the optimal numebr of neurons in the hidden layer
plot(1:60,err_Train,'r'); hold on;
plot(1:60,err_Val,'g'); hold off;
plot(1:60,mape_Train, 'r'); hold on;
plot(1:60,mape_Val, 'b'); hold off
ANN training
xt = x2;
yt = y2;
hiddenLayerSize = 24;
net = fitnet(hiddenLayerSize);
net.divideParam.trainRatio = 80/100;
net.divideParam.valRatio = 10/100;
net.divideParam.testRatio = 10/100;
[net,tr] = train(net, xt, yt);
ANN NETWORK PERFORMANCE
%Training performance
yTrain = net(xt(:,tr.trainInd));
yTrainTrue = yt(tr.trainInd);
errTrain = immse( yTrain , yTrainTrue)
mapeTrain = mae( yTrain , yTrainTrue)
%Validation performance
yVal = net(xt(:,tr.valInd));
yValTrue = yt(tr.valInd);
errVal = immse(yVal, yValTrue)
mapeVal = mae( yVal , yValTrue)
%testing performance
yTest = net(xt(:,tr.testInd));
yTestTrue = yt(tr.testInd);
errTest = immse(yTest, yTestTrue)
mapeTest = mae( yTest , yTestTrue)
Actual predictions
%Denormalized (restored) Training output
yTraindenorm = (yTrain')*sy + my;
yTrainTruedenorm = (yTrainTrue')*sy +my;
%Denormalized (restored) Validation output
yValdenorm = (yVal')*sy + my;
yValTruedenorm = (yValTrue')*sy + my;
%Denormalized (restored) Testing output
yTestdenorm = (yTest')*sy + my;
yTestTruedenorm = (yTestTrue')*sy + my;
